{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nam\u016bn\u0101 | noun sample, specimen, pattern or template in indo-aryan languages Namoona is meant to be a starting point for new developers to write projects for CHIME/FRB Collaboration utilizing the Maestro framework. Requirements \u00b6 In order to use the Maestro framework and this repository template to work without issues, you need to attach a SSH key configure your GitHub account. See the official GitHub guidelines for more information. This is needed, because most packages used within the package are private. Dependencies \u00b6 In order to use this template you need cookiecutter installed in your local python environment. pip pip install --user cookiecutter conda conda config --add channels conda-forge conda install cookiecutter","title":"Getting Started"},{"location":"#requirements","text":"In order to use the Maestro framework and this repository template to work without issues, you need to attach a SSH key configure your GitHub account. See the official GitHub guidelines for more information. This is needed, because most packages used within the package are private.","title":"Requirements"},{"location":"#dependencies","text":"In order to use this template you need cookiecutter installed in your local python environment. pip pip install --user cookiecutter conda conda config --add channels conda-forge conda install cookiecutter","title":"Dependencies"},{"location":"project/","text":"When using the namoona template it will automatically setup the following components for your backend. Project Layout \u00b6 <repository> # Project Root \u251c\u2500\u2500 <package_name> # Python Package Root \u251c\u2500\u2500 analysis/ # Location for low-level analysis code, e.g. functions \u251c\u2500\u2500 backend/ # Maestro Configuration File + Example API \u251c\u2500\u2500 pipelines/ # Analysis Pipelines, generally collection of routines. \u251c\u2500\u2500 routines/ # Analysis routines, generally collection of analysis functions. \u251c\u2500\u2500 utilities/ # Common code utilities docs # Technical Documentation tests # Tests .github/workflows # Continous Integration Config .pre-commit-config.yml # Configuration for pre-commit .gitignore # Git configuration pyproject.toml # The python package management poetry.lock # Lock file for python packages mkdocs.yml # Configuration for generating docs LICENCE # Project Licence README.md # README for the project Project Components \u00b6 When setting up a project with namoona the following components come pre-configured: Project Layout with ideal module setup Backend Configuration file for maestro Continous Integration setup via Github Actions Pre-Commit configuration hooks for: Code Formatting Documentation Style Python Type Hinting Checks for yaml , json & toml files Documentation setup via mkdocs-material Testing setup through pytest","title":"Project Layout"},{"location":"project/#project-layout","text":"<repository> # Project Root \u251c\u2500\u2500 <package_name> # Python Package Root \u251c\u2500\u2500 analysis/ # Location for low-level analysis code, e.g. functions \u251c\u2500\u2500 backend/ # Maestro Configuration File + Example API \u251c\u2500\u2500 pipelines/ # Analysis Pipelines, generally collection of routines. \u251c\u2500\u2500 routines/ # Analysis routines, generally collection of analysis functions. \u251c\u2500\u2500 utilities/ # Common code utilities docs # Technical Documentation tests # Tests .github/workflows # Continous Integration Config .pre-commit-config.yml # Configuration for pre-commit .gitignore # Git configuration pyproject.toml # The python package management poetry.lock # Lock file for python packages mkdocs.yml # Configuration for generating docs LICENCE # Project Licence README.md # README for the project","title":"Project Layout"},{"location":"project/#project-components","text":"When setting up a project with namoona the following components come pre-configured: Project Layout with ideal module setup Backend Configuration file for maestro Continous Integration setup via Github Actions Pre-Commit configuration hooks for: Code Formatting Documentation Style Python Type Hinting Checks for yaml , json & toml files Documentation setup via mkdocs-material Testing setup through pytest","title":"Project Components"},{"location":"usage/","text":"Create Repository \u00b6 In order to generate your repository from the namoon template, run the following command: cookiecutter git+ssh://git@github.com/chimefrb/namoona.git At this point, you will be asked to enter the following parameter details Template Parameters repository [On Github]: chime-frb-night project [Python Compatible]: frb_night backend [URL Prefix]: night author [Name]: Fogell McLovin email [Contact Email]: fogell.mclovin@hawaii-residents.com This will generate a folder named <project-name> in your present working directory containining all the relevant files with the proper project layout. Next, create a repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. Navigate to the directory <project-name> . Push the project directory to GitHub with the <URL> from repository's Quick Setup page First Steps \u00b6 Install Your Package pip install --upgrade poetry && poetry install This will all the required dependencies for your package in a virtual environment managed by poetry. Initialize Git git init git add . This will initialize git to manage the version control for the repository. Setup pre-commit poetry pre-commit install This will enabled automated checks to be executed for code quality, each time you do a git commit First Commit git add . # Adds the files in the local repository and stages them for commit. git commit -m \"project template from namoona\" At this point, you should expect to pre-commit to perform code checks, some of which will fail. After the checks are performed, you need to re-add all the changed files to the commit, and try once again. git add . git commit -m \"project template from namoona\" pre-commit will not allow you to push code to the Github Repository until it the minimum collaboration standards. First Push git branch -M main git remote add origin <URL> git remote -v git push -u origin main","title":"Usage"},{"location":"usage/#create-repository","text":"In order to generate your repository from the namoon template, run the following command: cookiecutter git+ssh://git@github.com/chimefrb/namoona.git At this point, you will be asked to enter the following parameter details Template Parameters repository [On Github]: chime-frb-night project [Python Compatible]: frb_night backend [URL Prefix]: night author [Name]: Fogell McLovin email [Contact Email]: fogell.mclovin@hawaii-residents.com This will generate a folder named <project-name> in your present working directory containining all the relevant files with the proper project layout. Next, create a repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. Navigate to the directory <project-name> . Push the project directory to GitHub with the <URL> from repository's Quick Setup page","title":"Create Repository"},{"location":"usage/#first-steps","text":"Install Your Package pip install --upgrade poetry && poetry install This will all the required dependencies for your package in a virtual environment managed by poetry. Initialize Git git init git add . This will initialize git to manage the version control for the repository. Setup pre-commit poetry pre-commit install This will enabled automated checks to be executed for code quality, each time you do a git commit First Commit git add . # Adds the files in the local repository and stages them for commit. git commit -m \"project template from namoona\" At this point, you should expect to pre-commit to perform code checks, some of which will fail. After the checks are performed, you need to re-add all the changed files to the commit, and try once again. git add . git commit -m \"project template from namoona\" pre-commit will not allow you to push code to the Github Repository until it the minimum collaboration standards. First Push git branch -M main git remote add origin <URL> git remote -v git push -u origin main","title":"First Steps"}]}